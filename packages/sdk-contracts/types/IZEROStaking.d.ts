/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IZEROStakingInterface extends ethers.utils.Interface {
  functions: {
    "getPendingETHGain(address)": FunctionFragment;
    "getPendingZUSDGain(address)": FunctionFragment;
    "increaseF_ETH(uint256)": FunctionFragment;
    "increaseF_ZUSD(uint256)": FunctionFragment;
    "setAddresses(address,address,address,address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPendingETHGain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingZUSDGain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseF_ETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseF_ZUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPendingETHGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingZUSDGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseF_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseF_ZUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "ActivePoolAddressSet(address)": EventFragment;
    "EtherSent(address,uint256)": EventFragment;
    "F_ETHUpdated(uint256)": EventFragment;
    "F_ZUSDUpdated(uint256)": EventFragment;
    "FeeDistributorAddressAddressSet(address)": EventFragment;
    "StakeChanged(address,uint256)": EventFragment;
    "StakerSnapshotsUpdated(address,uint256,uint256)": EventFragment;
    "StakingGainsWithdrawn(address,uint256,uint256)": EventFragment;
    "TotalZEROStakedUpdated(uint256)": EventFragment;
    "ZEROTokenAddressSet(address)": EventFragment;
    "ZUSDTokenAddressSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "F_ETHUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "F_ZUSDUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeeDistributorAddressAddressSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerSnapshotsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingGainsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalZEROStakedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZEROTokenAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZUSDTokenAddressSet"): EventFragment;
}

export type ActivePoolAddressSetEvent = TypedEvent<
  [string] & { _activePoolAddress: string }
>;

export type EtherSentEvent = TypedEvent<
  [string, BigNumber] & { _account: string; _amount: BigNumber }
>;

export type F_ETHUpdatedEvent = TypedEvent<[BigNumber] & { _F_ETH: BigNumber }>;

export type F_ZUSDUpdatedEvent = TypedEvent<
  [BigNumber] & { _F_ZUSD: BigNumber }
>;

export type FeeDistributorAddressAddressSetEvent = TypedEvent<
  [string] & { _feeDistributorAddress: string }
>;

export type StakeChangedEvent = TypedEvent<
  [string, BigNumber] & { staker: string; newStake: BigNumber }
>;

export type StakerSnapshotsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _staker: string;
    _F_ETH: BigNumber;
    _F_ZUSD: BigNumber;
  }
>;

export type StakingGainsWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    staker: string;
    ZUSDGain: BigNumber;
    ETHGain: BigNumber;
  }
>;

export type TotalZEROStakedUpdatedEvent = TypedEvent<
  [BigNumber] & { _totalZEROStaked: BigNumber }
>;

export type ZEROTokenAddressSetEvent = TypedEvent<
  [string] & { _zeroTokenAddress: string }
>;

export type ZUSDTokenAddressSetEvent = TypedEvent<
  [string] & { _zusdTokenAddress: string }
>;

export class IZEROStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IZEROStakingInterface;

  functions: {
    getPendingETHGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingZUSDGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseF_ETH(
      _ETHFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseF_ZUSD(
      _ZEROFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _zeroTokenAddress: string,
      _zusdTokenAddress: string,
      _feeDistributorAddress: string,
      _activePoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _ZEROamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _ZEROamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPendingETHGain(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingZUSDGain(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseF_ETH(
    _ETHFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseF_ZUSD(
    _ZEROFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _zeroTokenAddress: string,
    _zusdTokenAddress: string,
    _feeDistributorAddress: string,
    _activePoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _ZEROamount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _ZEROamount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPendingETHGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingZUSDGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseF_ETH(
      _ETHFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseF_ZUSD(
      _ZEROFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _zeroTokenAddress: string,
      _zusdTokenAddress: string,
      _feeDistributorAddress: string,
      _activePoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_ZEROamount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstake(
      _ZEROamount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivePoolAddressSet(address)"(
      _activePoolAddress?: null
    ): TypedEventFilter<[string], { _activePoolAddress: string }>;

    ActivePoolAddressSet(
      _activePoolAddress?: null
    ): TypedEventFilter<[string], { _activePoolAddress: string }>;

    "EtherSent(address,uint256)"(
      _account?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _account: string; _amount: BigNumber }
    >;

    EtherSent(
      _account?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _account: string; _amount: BigNumber }
    >;

    "F_ETHUpdated(uint256)"(
      _F_ETH?: null
    ): TypedEventFilter<[BigNumber], { _F_ETH: BigNumber }>;

    F_ETHUpdated(
      _F_ETH?: null
    ): TypedEventFilter<[BigNumber], { _F_ETH: BigNumber }>;

    "F_ZUSDUpdated(uint256)"(
      _F_ZUSD?: null
    ): TypedEventFilter<[BigNumber], { _F_ZUSD: BigNumber }>;

    F_ZUSDUpdated(
      _F_ZUSD?: null
    ): TypedEventFilter<[BigNumber], { _F_ZUSD: BigNumber }>;

    "FeeDistributorAddressAddressSet(address)"(
      _feeDistributorAddress?: null
    ): TypedEventFilter<[string], { _feeDistributorAddress: string }>;

    FeeDistributorAddressAddressSet(
      _feeDistributorAddress?: null
    ): TypedEventFilter<[string], { _feeDistributorAddress: string }>;

    "StakeChanged(address,uint256)"(
      staker?: string | null,
      newStake?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; newStake: BigNumber }
    >;

    StakeChanged(
      staker?: string | null,
      newStake?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; newStake: BigNumber }
    >;

    "StakerSnapshotsUpdated(address,uint256,uint256)"(
      _staker?: null,
      _F_ETH?: null,
      _F_ZUSD?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _F_ETH: BigNumber; _F_ZUSD: BigNumber }
    >;

    StakerSnapshotsUpdated(
      _staker?: null,
      _F_ETH?: null,
      _F_ZUSD?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _F_ETH: BigNumber; _F_ZUSD: BigNumber }
    >;

    "StakingGainsWithdrawn(address,uint256,uint256)"(
      staker?: string | null,
      ZUSDGain?: null,
      ETHGain?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { staker: string; ZUSDGain: BigNumber; ETHGain: BigNumber }
    >;

    StakingGainsWithdrawn(
      staker?: string | null,
      ZUSDGain?: null,
      ETHGain?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { staker: string; ZUSDGain: BigNumber; ETHGain: BigNumber }
    >;

    "TotalZEROStakedUpdated(uint256)"(
      _totalZEROStaked?: null
    ): TypedEventFilter<[BigNumber], { _totalZEROStaked: BigNumber }>;

    TotalZEROStakedUpdated(
      _totalZEROStaked?: null
    ): TypedEventFilter<[BigNumber], { _totalZEROStaked: BigNumber }>;

    "ZEROTokenAddressSet(address)"(
      _zeroTokenAddress?: null
    ): TypedEventFilter<[string], { _zeroTokenAddress: string }>;

    ZEROTokenAddressSet(
      _zeroTokenAddress?: null
    ): TypedEventFilter<[string], { _zeroTokenAddress: string }>;

    "ZUSDTokenAddressSet(address)"(
      _zusdTokenAddress?: null
    ): TypedEventFilter<[string], { _zusdTokenAddress: string }>;

    ZUSDTokenAddressSet(
      _zusdTokenAddress?: null
    ): TypedEventFilter<[string], { _zusdTokenAddress: string }>;
  };

  estimateGas: {
    getPendingETHGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingZUSDGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseF_ETH(
      _ETHFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseF_ZUSD(
      _ZEROFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _zeroTokenAddress: string,
      _zusdTokenAddress: string,
      _feeDistributorAddress: string,
      _activePoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _ZEROamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _ZEROamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPendingETHGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingZUSDGain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseF_ETH(
      _ETHFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseF_ZUSD(
      _ZEROFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _zeroTokenAddress: string,
      _zusdTokenAddress: string,
      _feeDistributorAddress: string,
      _activePoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _ZEROamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _ZEROamount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
