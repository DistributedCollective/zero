/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestIntegrationInterface extends ethers.utils.Interface {
  functions: {
    "testAddCollateral()": FunctionFragment;
    "testBorrowerLiquidation(address)": FunctionFragment;
    "testCalculateBorrowingFee(uint256)": FunctionFragment;
    "testCloseCreditLineAndWithdrawCollateral()": FunctionFragment;
    "testGetBtcPrice(address)": FunctionFragment;
    "testGetEntireDebtAndColl(address)": FunctionFragment;
    "testGetNominalICR(address)": FunctionFragment;
    "testNPositionsLiquidation(uint256)": FunctionFragment;
    "testOpenCreditLine(uint256,uint256)": FunctionFragment;
    "testProvideToSP(uint256)": FunctionFragment;
    "testRedeemCollateral(address,address,uint256,uint256)": FunctionFragment;
    "testRepayZUSD(uint256)": FunctionFragment;
    "testWithdrawCollateral(uint256)": FunctionFragment;
    "testWithdrawFromSP(uint256)": FunctionFragment;
    "testWithdrawRBTCGainToTrove()": FunctionFragment;
    "testWithdrawZUSD(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "testAddCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBorrowerLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCalculateBorrowingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCloseCreditLineAndWithdrawCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetBtcPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetEntireDebtAndColl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetNominalICR",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testNPositionsLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testOpenCreditLine",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testProvideToSP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRedeemCollateral",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRepayZUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testWithdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testWithdrawFromSP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testWithdrawRBTCGainToTrove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testWithdrawZUSD",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "testAddCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBorrowerLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCalculateBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCloseCreditLineAndWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetBtcPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetEntireDebtAndColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetNominalICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testNPositionsLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testOpenCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testProvideToSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRedeemCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRepayZUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithdrawFromSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithdrawRBTCGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithdrawZUSD",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestIntegration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestIntegrationInterface;

  functions: {
    testAddCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testBorrowerLiquidation(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testCalculateBorrowingFee(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { borrowingFee: BigNumber }>;

    testCloseCreditLineAndWithdrawCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testGetBtcPrice(
      priceFeedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testGetEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingZUSDDebtReward: BigNumber;
        pendingRBTCReward: BigNumber;
      }
    >;

    testGetNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralRatio: BigNumber }>;

    testNPositionsLiquidation(
      maxLiquidations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testOpenCreditLine(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testProvideToSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRedeemCollateral(
      _hintHelpersAddress: string,
      _priceFeedAddress: string,
      _ZUSDAmount: BigNumberish,
      _maxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRepayZUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testWithdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testWithdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testWithdrawRBTCGainToTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testWithdrawZUSD(
      _maxFee: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  testAddCollateral(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testBorrowerLiquidation(
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testCalculateBorrowingFee(
    _ZUSDDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testCloseCreditLineAndWithdrawCollateral(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testGetBtcPrice(
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testGetEntireDebtAndColl(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      coll: BigNumber;
      pendingZUSDDebtReward: BigNumber;
      pendingRBTCReward: BigNumber;
    }
  >;

  testGetNominalICR(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testNPositionsLiquidation(
    maxLiquidations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testOpenCreditLine(
    _maxFeePercentage: BigNumberish,
    _ZUSDAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testProvideToSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRedeemCollateral(
    _hintHelpersAddress: string,
    _priceFeedAddress: string,
    _ZUSDAmount: BigNumberish,
    _maxFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRepayZUSD(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testWithdrawCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testWithdrawFromSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testWithdrawRBTCGainToTrove(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testWithdrawZUSD(
    _maxFee: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    testAddCollateral(overrides?: CallOverrides): Promise<void>;

    testBorrowerLiquidation(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCalculateBorrowingFee(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testCloseCreditLineAndWithdrawCollateral(
      overrides?: CallOverrides
    ): Promise<void>;

    testGetBtcPrice(
      priceFeedAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingZUSDDebtReward: BigNumber;
        pendingRBTCReward: BigNumber;
      }
    >;

    testGetNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testNPositionsLiquidation(
      maxLiquidations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testOpenCreditLine(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testProvideToSP(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testRedeemCollateral(
      _hintHelpersAddress: string,
      _priceFeedAddress: string,
      _ZUSDAmount: BigNumberish,
      _maxFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testRepayZUSD(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testWithdrawCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testWithdrawFromSP(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testWithdrawRBTCGainToTrove(overrides?: CallOverrides): Promise<void>;

    testWithdrawZUSD(
      _maxFee: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    testAddCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testBorrowerLiquidation(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testCalculateBorrowingFee(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testCloseCreditLineAndWithdrawCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testGetBtcPrice(
      priceFeedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testGetEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testNPositionsLiquidation(
      maxLiquidations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testOpenCreditLine(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testProvideToSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRedeemCollateral(
      _hintHelpersAddress: string,
      _priceFeedAddress: string,
      _ZUSDAmount: BigNumberish,
      _maxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRepayZUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testWithdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testWithdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testWithdrawRBTCGainToTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testWithdrawZUSD(
      _maxFee: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testAddCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testBorrowerLiquidation(
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testCalculateBorrowingFee(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testCloseCreditLineAndWithdrawCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testGetBtcPrice(
      priceFeedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testGetEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testNPositionsLiquidation(
      maxLiquidations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testOpenCreditLine(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testProvideToSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRedeemCollateral(
      _hintHelpersAddress: string,
      _priceFeedAddress: string,
      _ZUSDAmount: BigNumberish,
      _maxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRepayZUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testWithdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testWithdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testWithdrawRBTCGainToTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testWithdrawZUSD(
      _maxFee: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
