/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestIntegration,
  TestIntegrationInterface,
} from "../TestIntegration";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_libraryContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "testAddCollateral",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
    ],
    name: "testBorrowerLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ZUSDDebt",
        type: "uint256",
      },
    ],
    name: "testCalculateBorrowingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "borrowingFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testCloseCreditLineAndWithdrawCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    name: "testGetBtcPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "btcPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_borrower",
        type: "address",
      },
    ],
    name: "testGetEntireDebtAndColl",
    outputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "coll",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pendingZUSDDebtReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pendingRBTCReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_borrower",
        type: "address",
      },
    ],
    name: "testGetNominalICR",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralRatio",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxLiquidations",
        type: "uint256",
      },
    ],
    name: "testNPositionsLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxFeePercentage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ZUSDAmount",
        type: "uint256",
      },
    ],
    name: "testOpenCreditLine",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testProvideToSP",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_hintHelpersAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeedAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_ZUSDAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxFeePercentage",
        type: "uint256",
      },
    ],
    name: "testRedeemCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testRepayZUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testWithdrawCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testWithdrawFromSP",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testWithdrawRBTCGainToTrove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "testWithdrawZUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e78380380610e788339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610e13806100656000396000f3fe6080604052600436106100f35760003560e01c80637637bcc11161008a578063e117e46011610059578063e117e460146102ff578063f0f386fb14610322578063f8d422511461034c578063fa773c801461037f576100f3565b80637637bcc1146102795780638baeb41b14610281578063bd2d98f7146102ab578063cfb85c95146102d5576100f3565b80634dad340b116100c65780634dad340b146101c25780635072c886146101d7578063564678ca1461021c57806374d78d6114610246576100f3565b80631bcc2b39146100f857806331465cf414610151578063350fa0431461017d578063382e9371146101ad575b600080fd5b34801561010457600080fd5b5061012b6004803603602081101561011b57600080fd5b50356001600160a01b03166103c8565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561015d57600080fd5b5061017b6004803603602081101561017457600080fd5b50356103f4565b005b34801561018957600080fd5b5061017b600480360360408110156101a057600080fd5b508035906020013561040e565b3480156101b957600080fd5b5061017b61042b565b3480156101ce57600080fd5b5061017b610442565b3480156101e357600080fd5b5061020a600480360360208110156101fa57600080fd5b50356001600160a01b0316610457565b60408051918252519081900360200190f35b34801561022857600080fd5b5061020a6004803603602081101561023f57600080fd5b5035610468565b34801561025257600080fd5b5061020a6004803603602081101561026957600080fd5b50356001600160a01b031661047f565b61017b610496565b34801561028d57600080fd5b5061017b600480360360208110156102a457600080fd5b50356104ab565b3480156102b757600080fd5b5061017b600480360360208110156102ce57600080fd5b50356104c2565b3480156102e157600080fd5b5061017b600480360360208110156102f857600080fd5b50356104d9565b61017b6004803603604081101561031557600080fd5b50803590602001356104f0565b34801561032e57600080fd5b5061017b6004803603602081101561034557600080fd5b5035610509565b34801561035857600080fd5b5061017b6004803603602081101561036f57600080fd5b50356001600160a01b031661051f565b34801561038b57600080fd5b5061017b600480360360808110156103a257600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610536565b600080548190819081906103e5906001600160a01b031686610555565b93509350935093509193509193565b60005461040b9082906001600160a01b0316610601565b50565b60005461042790839083906001600160a01b031661067c565b5050565b600054610440906001600160a01b0316610708565b565b600054610440906001600160a01b0316610784565b6000610462826107d1565b92915050565b60008054610462906001600160a01b031683610855565b60008054610462906001600160a01b0316836108e3565b600054610440906001600160a01b031661093c565b60005461040b9082906001600160a01b03166109a7565b60005461040b9082906001600160a01b03166109ff565b60005461040b9082906001600160a01b0316610a64565b60005461042790839083906001600160a01b0316610ac9565b60005461040b906001600160a01b031682610b42565b60005461040b9082906001600160a01b0316610b9a565b60005461054f906001600160a01b031685858585610bf2565b50505050565b600080808085803b8061056757600080fd5b60408051632e46be5f60e21b81526001600160a01b03898116600483015291518a9283169163b91af97c916024808301926080929190829003018186803b1580156105b157600080fd5b505afa1580156105c5573d6000803e3d6000fd5b505050506040513d60808110156105db57600080fd5b50805160208201516040830151606090930151919c909b50919950975095505050505050565b80803b8061060e57600080fd5b60408051635f788d6560e01b815260048101869052600060248201819052915185926001600160a01b03841692635f788d65926044808301939282900301818387803b15801561065d57600080fd5b505af1158015610671573d6000803e3d6000fd5b505050505050505050565b80803b8061068957600080fd5b604080516303752b4b60e51b8152600481018790526024810186905233604482018190526064820152905184916001600160a01b03831691636ea569609160848082019260009290919082900301818387803b1580156106e857600080fd5b505af11580156106fc573d6000803e3d6000fd5b50505050505050505050565b80803b8061071557600080fd5b60408051637ed0080d60e11b815233600482018190526024820152905184916001600160a01b0383169163fda0101a9160448082019260009290919082900301818387803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b5050505050505050565b80803b8061079157600080fd5b6000839050806001600160a01b0316630e704d506040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561076657600080fd5b600081803b806107e057600080fd5b6000849050806001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b505050506040513d602081101561084a57600080fd5b505195945050505050565b600082803b8061086457600080fd5b6000859050806001600160a01b031663631203b0866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d60208110156108d757600080fd5b50519695505050505050565b600082803b806108f257600080fd5b6040805163b0d8e18160e01b81526001600160a01b0386811660048301529151879283169163b0d8e181916024808301926020929190829003018186803b1580156108ad57600080fd5b6000341161094957600080fd5b80803b8061095657600080fd5b604080516368647db160e01b815233600482018190526024820152905184916001600160a01b038316916368647db19160448082019260009290919082900301818387803b15801561076657600080fd5b80803b806109b457600080fd5b6000839050806001600160a01b0316632e54bf95866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561065d57600080fd5b80803b80610a0c57600080fd5b6040805163afbc74b560e01b81526004810186905233602482018190526044820152905184916001600160a01b0383169163afbc74b59160648082019260009290919082900301818387803b15801561065d57600080fd5b80803b80610a7157600080fd5b6040805163154c09cf60e21b81526004810186905233602482018190526044820152905184916001600160a01b03831691635530273c9160648082019260009290919082900301818387803b15801561065d57600080fd5b60003411610ad657600080fd5b80803b80610ae357600080fd5b6040805163860665b360e01b8152600481018790526024810186905233604482018190526064820152905184916001600160a01b0383169163860665b39160848082019260009290919082900301818387803b1580156106e857600080fd5b81803b80610b4f57600080fd5b6000849050806001600160a01b031663653d46e7856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561065d57600080fd5b80803b80610ba757600080fd5b604080516305f0caad60e31b81526001600160a01b03868116600483015291518592831691632f86556891602480830192600092919082900301818387803b15801561065d57600080fd5b84803b80610bff57600080fd5b610c07610db3565b6000889050600088905060008890506000816001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c5357600080fd5b505af1158015610c67573d6000803e3d6000fd5b505050506040513d6020811015610c7d57600080fd5b50516040805163098a26dd60e11b8152600481018c9052602481018390526000604482015290519192506001600160a01b038516916313144dba91606480820192606092909190829003018186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d6060811015610d0257600080fd5b5080516020808301516040938401518985018190529189018190526001600160a01b03928316808a528451635e69ba9360e11b815260048101939093526024830152336044830181905260648301526084820152600060a4820181905260c482018c905292519187169263bcd375269260e48084019382900301818387803b158015610d8d57600080fd5b505af1158015610da1573d6000803e3d6000fd5b50505050505050505050505050505050565b604051806060016040528060006001600160a01b031681526020016000815260200160008152509056fea26469706673582212202ef0f94a429a54c7d5cd66c4504fcb68658034b9411b99e3696b953a184bf6da64736f6c634300060b0033";

export class TestIntegration__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _libraryContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestIntegration> {
    return super.deploy(
      _libraryContractAddress,
      overrides || {}
    ) as Promise<TestIntegration>;
  }
  getDeployTransaction(
    _libraryContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_libraryContractAddress, overrides || {});
  }
  attach(address: string): TestIntegration {
    return super.attach(address) as TestIntegration;
  }
  connect(signer: Signer): TestIntegration__factory {
    return super.connect(signer) as TestIntegration__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestIntegrationInterface {
    return new utils.Interface(_abi) as TestIntegrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestIntegration {
    return new Contract(address, _abi, signerOrProvider) as TestIntegration;
  }
}
