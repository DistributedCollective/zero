/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TroveStatisticsLib,
  TroveStatisticsLibInterface,
} from "../TroveStatisticsLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "troveManagerContractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_ZUSDDebt",
        type: "uint256",
      },
    ],
    name: "calculateBorrowingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "borrowingFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "troveManagerContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_borrower",
        type: "address",
      },
    ],
    name: "getEntireDebtAndColl",
    outputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "coll",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pendingZUSDDebtReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pendingRBTCReward",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "troveManagerContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_borrower",
        type: "address",
      },
    ],
    name: "getNominalICR",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralRatio",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6102d9610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806326f7a0d4146100505780638c638a1d146100a457806390ec2301146100e2575b600080fd5b61007e6004803603604081101561006657600080fd5b506001600160a01b0381358116916020013516610110565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6100d0600480360360408110156100ba57600080fd5b506001600160a01b0381351690602001356101bc565b60408051918252519081900360200190f35b6100d0600480360360408110156100f857600080fd5b506001600160a01b038135811691602001351661024a565b600080808085803b8061012257600080fd5b60408051632e46be5f60e21b81526001600160a01b03898116600483015291518a9283169163b91af97c916024808301926080929190829003018186803b15801561016c57600080fd5b505afa158015610180573d6000803e3d6000fd5b505050506040513d608081101561019657600080fd5b50805160208201516040830151606090930151919c909b50919950975095505050505050565b600082803b806101cb57600080fd5b6000859050806001600160a01b031663631203b0866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561021457600080fd5b505afa158015610228573d6000803e3d6000fd5b505050506040513d602081101561023e57600080fd5b50519695505050505050565b600082803b8061025957600080fd5b6040805163b0d8e18160e01b81526001600160a01b0386811660048301529151879283169163b0d8e181916024808301926020929190829003018186803b15801561021457600080fdfea2646970667358221220c271074dba39942e5ff2a6fa3ca6daced493d9acea517f9219fa80d7f851d49864736f6c634300060b0033";

export class TroveStatisticsLib__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TroveStatisticsLib> {
    return super.deploy(overrides || {}) as Promise<TroveStatisticsLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TroveStatisticsLib {
    return super.attach(address) as TroveStatisticsLib;
  }
  connect(signer: Signer): TroveStatisticsLib__factory {
    return super.connect(signer) as TroveStatisticsLib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TroveStatisticsLibInterface {
    return new utils.Interface(_abi) as TroveStatisticsLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TroveStatisticsLib {
    return new Contract(address, _abi, signerOrProvider) as TroveStatisticsLib;
  }
}
