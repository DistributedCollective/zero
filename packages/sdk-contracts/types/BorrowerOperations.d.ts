/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BorrowerOperationsInterface extends ethers.utils.Interface {
  functions: {
    "BORROWING_FEE_FLOOR()": FunctionFragment;
    "DECIMAL_PRECISION()": FunctionFragment;
    "MIN_NET_DEBT()": FunctionFragment;
    "NAME()": FunctionFragment;
    "ZUSD_GAS_COMPENSATION()": FunctionFragment;
    "_100pct()": FunctionFragment;
    "activePool()": FunctionFragment;
    "addColl(address,address)": FunctionFragment;
    "adjustNueTrove(uint256,uint256,uint256,bool,address,address)": FunctionFragment;
    "adjustTrove(uint256,uint256,uint256,bool,address,address)": FunctionFragment;
    "claimCollateral()": FunctionFragment;
    "closeNueTrove()": FunctionFragment;
    "closeTrove()": FunctionFragment;
    "defaultPool()": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "getCompositeDebt(uint256)": FunctionFragment;
    "getEntireSystemColl()": FunctionFragment;
    "getEntireSystemDebt()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "liquityBaseParams()": FunctionFragment;
    "masset()": FunctionFragment;
    "moveETHGainToTrove(address,address,address)": FunctionFragment;
    "openNueTrove(uint256,uint256,address,address)": FunctionFragment;
    "openTrove(uint256,uint256,address,address)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "repayZUSD(uint256,address,address)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "setMassetAddress(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "sortedTroves()": FunctionFragment;
    "troveManager()": FunctionFragment;
    "withdrawColl(uint256,address,address)": FunctionFragment;
    "withdrawZUSD(uint256,uint256,address,address)": FunctionFragment;
    "zeroStaking()": FunctionFragment;
    "zeroStakingAddress()": FunctionFragment;
    "zusdToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_NET_DEBT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZUSD_GAS_COMPENSATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addColl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustNueTrove",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustTrove",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeNueTrove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompositeDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquityBaseParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "masset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moveETHGainToTrove",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openNueTrove",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrove",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayZUSD",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMassetAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawColl",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawZUSD",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroStakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zusdToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_NET_DEBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZUSD_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addColl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustNueTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeNueTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompositeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquityBaseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveETHGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openNueTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTrove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayZUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMassetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawZUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zusdToken", data: BytesLike): Result;

  events: {
    "ActivePoolAddressChanged(address)": EventFragment;
    "CollSurplusPoolAddressChanged(address)": EventFragment;
    "DefaultPoolAddressChanged(address)": EventFragment;
    "FeeDistributorAddressChanged(address)": EventFragment;
    "GasPoolAddressChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceFeedAddressChanged(address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolAddressChanged(address)": EventFragment;
    "TroveCreated(address,uint256)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "TroveUpdated(address,uint256,uint256,uint256,uint8)": EventFragment;
    "ZEROStakingAddressChanged(address)": EventFragment;
    "ZUSDBorrowingFeePaid(address,uint256)": EventFragment;
    "ZUSDTokenAddressChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollSurplusPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeeDistributorAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZEROStakingAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZUSDBorrowingFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZUSDTokenAddressChanged"): EventFragment;
}

export type ActivePoolAddressChangedEvent = TypedEvent<
  [string] & { _activePoolAddress: string }
>;

export type CollSurplusPoolAddressChangedEvent = TypedEvent<
  [string] & { _collSurplusPoolAddress: string }
>;

export type DefaultPoolAddressChangedEvent = TypedEvent<
  [string] & { _defaultPoolAddress: string }
>;

export type FeeDistributorAddressChangedEvent = TypedEvent<
  [string] & { _feeDistributorAddress: string }
>;

export type GasPoolAddressChangedEvent = TypedEvent<
  [string] & { _gasPoolAddress: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceFeedAddressChangedEvent = TypedEvent<
  [string] & { _newPriceFeedAddress: string }
>;

export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string] & { _sortedTrovesAddress: string }
>;

export type StabilityPoolAddressChangedEvent = TypedEvent<
  [string] & { _stabilityPoolAddress: string }
>;

export type TroveCreatedEvent = TypedEvent<
  [string, BigNumber] & { _borrower: string; arrayIndex: BigNumber }
>;

export type TroveManagerAddressChangedEvent = TypedEvent<
  [string] & { _newTroveManagerAddress: string }
>;

export type TroveUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number] & {
    _borrower: string;
    _debt: BigNumber;
    _coll: BigNumber;
    stake: BigNumber;
    operation: number;
  }
>;

export type ZEROStakingAddressChangedEvent = TypedEvent<
  [string] & { _zeroStakingAddress: string }
>;

export type ZUSDBorrowingFeePaidEvent = TypedEvent<
  [string, BigNumber] & { _borrower: string; _ZUSDFee: BigNumber }
>;

export type ZUSDTokenAddressChangedEvent = TypedEvent<
  [string] & { _zusdTokenAddress: string }
>;

export class BorrowerOperations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BorrowerOperationsInterface;

  functions: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _100pct(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    addColl(
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustNueTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeNueTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    getCompositeDebt(
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getOwner(overrides?: CallOverrides): Promise<[string] & { _owner: string }>;

    liquityBaseParams(overrides?: CallOverrides): Promise<[string]>;

    masset(overrides?: CallOverrides): Promise<[string]>;

    moveETHGainToTrove(
      _borrower: string,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openNueTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    repayZUSD(
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _feeDistributorAddress: string,
      _liquityBaseParamsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _sortedTrovesAddress: string,
      _zusdTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMassetAddress(
      _massetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;

    withdrawColl(
      _collWithdrawal: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawZUSD(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zeroStaking(overrides?: CallOverrides): Promise<[string]>;

    zeroStakingAddress(overrides?: CallOverrides): Promise<[string]>;

    zusdToken(overrides?: CallOverrides): Promise<[string]>;
  };

  BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

  _100pct(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  addColl(
    _upperHint: string,
    _lowerHint: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustNueTrove(
    _maxFeePercentage: BigNumberish,
    _collWithdrawal: BigNumberish,
    _ZUSDChange: BigNumberish,
    _isDebtIncrease: boolean,
    _upperHint: string,
    _lowerHint: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustTrove(
    _maxFeePercentage: BigNumberish,
    _collWithdrawal: BigNumberish,
    _ZUSDChange: BigNumberish,
    _isDebtIncrease: boolean,
    _upperHint: string,
    _lowerHint: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeNueTrove(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTrove(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  getCompositeDebt(
    _debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  liquityBaseParams(overrides?: CallOverrides): Promise<string>;

  masset(overrides?: CallOverrides): Promise<string>;

  moveETHGainToTrove(
    _borrower: string,
    _upperHint: string,
    _lowerHint: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openNueTrove(
    _maxFeePercentage: BigNumberish,
    _ZUSDAmount: BigNumberish,
    _upperHint: string,
    _lowerHint: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openTrove(
    _maxFeePercentage: BigNumberish,
    _ZUSDAmount: BigNumberish,
    _upperHint: string,
    _lowerHint: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  repayZUSD(
    _ZUSDAmount: BigNumberish,
    _upperHint: string,
    _lowerHint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _feeDistributorAddress: string,
    _liquityBaseParamsAddress: string,
    _troveManagerAddress: string,
    _activePoolAddress: string,
    _defaultPoolAddress: string,
    _stabilityPoolAddress: string,
    _gasPoolAddress: string,
    _collSurplusPoolAddress: string,
    _priceFeedAddress: string,
    _sortedTrovesAddress: string,
    _zusdTokenAddress: string,
    _zeroStakingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMassetAddress(
    _massetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  withdrawColl(
    _collWithdrawal: BigNumberish,
    _upperHint: string,
    _lowerHint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawZUSD(
    _maxFeePercentage: BigNumberish,
    _ZUSDAmount: BigNumberish,
    _upperHint: string,
    _lowerHint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zeroStaking(overrides?: CallOverrides): Promise<string>;

  zeroStakingAddress(overrides?: CallOverrides): Promise<string>;

  zusdToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    addColl(
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustNueTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollateral(overrides?: CallOverrides): Promise<void>;

    closeNueTrove(overrides?: CallOverrides): Promise<void>;

    closeTrove(overrides?: CallOverrides): Promise<void>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    getCompositeDebt(
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    liquityBaseParams(overrides?: CallOverrides): Promise<string>;

    masset(overrides?: CallOverrides): Promise<string>;

    moveETHGainToTrove(
      _borrower: string,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openNueTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    repayZUSD(
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _feeDistributorAddress: string,
      _liquityBaseParamsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _sortedTrovesAddress: string,
      _zusdTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMassetAddress(
      _massetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    troveManager(overrides?: CallOverrides): Promise<string>;

    withdrawColl(
      _collWithdrawal: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawZUSD(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zeroStaking(overrides?: CallOverrides): Promise<string>;

    zeroStakingAddress(overrides?: CallOverrides): Promise<string>;

    zusdToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ActivePoolAddressChanged(address)"(
      _activePoolAddress?: null
    ): TypedEventFilter<[string], { _activePoolAddress: string }>;

    ActivePoolAddressChanged(
      _activePoolAddress?: null
    ): TypedEventFilter<[string], { _activePoolAddress: string }>;

    "CollSurplusPoolAddressChanged(address)"(
      _collSurplusPoolAddress?: null
    ): TypedEventFilter<[string], { _collSurplusPoolAddress: string }>;

    CollSurplusPoolAddressChanged(
      _collSurplusPoolAddress?: null
    ): TypedEventFilter<[string], { _collSurplusPoolAddress: string }>;

    "DefaultPoolAddressChanged(address)"(
      _defaultPoolAddress?: null
    ): TypedEventFilter<[string], { _defaultPoolAddress: string }>;

    DefaultPoolAddressChanged(
      _defaultPoolAddress?: null
    ): TypedEventFilter<[string], { _defaultPoolAddress: string }>;

    "FeeDistributorAddressChanged(address)"(
      _feeDistributorAddress?: null
    ): TypedEventFilter<[string], { _feeDistributorAddress: string }>;

    FeeDistributorAddressChanged(
      _feeDistributorAddress?: null
    ): TypedEventFilter<[string], { _feeDistributorAddress: string }>;

    "GasPoolAddressChanged(address)"(
      _gasPoolAddress?: null
    ): TypedEventFilter<[string], { _gasPoolAddress: string }>;

    GasPoolAddressChanged(
      _gasPoolAddress?: null
    ): TypedEventFilter<[string], { _gasPoolAddress: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceFeedAddressChanged(address)"(
      _newPriceFeedAddress?: null
    ): TypedEventFilter<[string], { _newPriceFeedAddress: string }>;

    PriceFeedAddressChanged(
      _newPriceFeedAddress?: null
    ): TypedEventFilter<[string], { _newPriceFeedAddress: string }>;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _sortedTrovesAddress: string }>;

    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _sortedTrovesAddress: string }>;

    "StabilityPoolAddressChanged(address)"(
      _stabilityPoolAddress?: null
    ): TypedEventFilter<[string], { _stabilityPoolAddress: string }>;

    StabilityPoolAddressChanged(
      _stabilityPoolAddress?: null
    ): TypedEventFilter<[string], { _stabilityPoolAddress: string }>;

    "TroveCreated(address,uint256)"(
      _borrower?: string | null,
      arrayIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _borrower: string; arrayIndex: BigNumber }
    >;

    TroveCreated(
      _borrower?: string | null,
      arrayIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _borrower: string; arrayIndex: BigNumber }
    >;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TypedEventFilter<[string], { _newTroveManagerAddress: string }>;

    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TypedEventFilter<[string], { _newTroveManagerAddress: string }>;

    "TroveUpdated(address,uint256,uint256,uint256,uint8)"(
      _borrower?: string | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number],
      {
        _borrower: string;
        _debt: BigNumber;
        _coll: BigNumber;
        stake: BigNumber;
        operation: number;
      }
    >;

    TroveUpdated(
      _borrower?: string | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number],
      {
        _borrower: string;
        _debt: BigNumber;
        _coll: BigNumber;
        stake: BigNumber;
        operation: number;
      }
    >;

    "ZEROStakingAddressChanged(address)"(
      _zeroStakingAddress?: null
    ): TypedEventFilter<[string], { _zeroStakingAddress: string }>;

    ZEROStakingAddressChanged(
      _zeroStakingAddress?: null
    ): TypedEventFilter<[string], { _zeroStakingAddress: string }>;

    "ZUSDBorrowingFeePaid(address,uint256)"(
      _borrower?: string | null,
      _ZUSDFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _borrower: string; _ZUSDFee: BigNumber }
    >;

    ZUSDBorrowingFeePaid(
      _borrower?: string | null,
      _ZUSDFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _borrower: string; _ZUSDFee: BigNumber }
    >;

    "ZUSDTokenAddressChanged(address)"(
      _zusdTokenAddress?: null
    ): TypedEventFilter<[string], { _zusdTokenAddress: string }>;

    ZUSDTokenAddressChanged(
      _zusdTokenAddress?: null
    ): TypedEventFilter<[string], { _zusdTokenAddress: string }>;
  };

  estimateGas: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    addColl(
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustNueTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeNueTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    getCompositeDebt(
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    liquityBaseParams(overrides?: CallOverrides): Promise<BigNumber>;

    masset(overrides?: CallOverrides): Promise<BigNumber>;

    moveETHGainToTrove(
      _borrower: string,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openNueTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    repayZUSD(
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _feeDistributorAddress: string,
      _liquityBaseParamsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _sortedTrovesAddress: string,
      _zusdTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMassetAddress(
      _massetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawColl(
      _collWithdrawal: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawZUSD(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zeroStaking(overrides?: CallOverrides): Promise<BigNumber>;

    zeroStakingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    zusdToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROWING_FEE_FLOOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZUSD_GAS_COMPENSATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _100pct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addColl(
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustNueTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustTrove(
      _maxFeePercentage: BigNumberish,
      _collWithdrawal: BigNumberish,
      _ZUSDChange: BigNumberish,
      _isDebtIncrease: boolean,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeNueTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTrove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompositeDebt(
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquityBaseParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveETHGainToTrove(
      _borrower: string,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openNueTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openTrove(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayZUSD(
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _feeDistributorAddress: string,
      _liquityBaseParamsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _sortedTrovesAddress: string,
      _zusdTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMassetAddress(
      _massetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawColl(
      _collWithdrawal: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawZUSD(
      _maxFeePercentage: BigNumberish,
      _ZUSDAmount: BigNumberish,
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zeroStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroStakingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zusdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
