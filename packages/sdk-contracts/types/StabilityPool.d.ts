/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StabilityPoolInterface extends ethers.utils.Interface {
  functions: {
    "DECIMAL_PRECISION()": FunctionFragment;
    "MIN_NET_DEBT()": FunctionFragment;
    "NAME()": FunctionFragment;
    "P()": FunctionFragment;
    "SCALE_FACTOR()": FunctionFragment;
    "ZUSD_GAS_COMPENSATION()": FunctionFragment;
    "_100pct()": FunctionFragment;
    "activePool()": FunctionFragment;
    "borrowerOperations()": FunctionFragment;
    "communityIssuance()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentScale()": FunctionFragment;
    "defaultPool()": FunctionFragment;
    "depositSnapshots(address)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "epochToScaleToG(uint128,uint128)": FunctionFragment;
    "epochToScaleToSum(uint128,uint128)": FunctionFragment;
    "frontEndSnapshots(address)": FunctionFragment;
    "frontEndStakes(address)": FunctionFragment;
    "frontEnds(address)": FunctionFragment;
    "getCompoundedFrontEndStake(address)": FunctionFragment;
    "getCompoundedZUSDDeposit(address)": FunctionFragment;
    "getDepositorETHGain(address)": FunctionFragment;
    "getDepositorZEROGain(address)": FunctionFragment;
    "getETH()": FunctionFragment;
    "getEntireSystemColl()": FunctionFragment;
    "getEntireSystemDebt()": FunctionFragment;
    "getFrontEndZEROGain(address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getTotalZUSDDeposits()": FunctionFragment;
    "lastETHError_Offset()": FunctionFragment;
    "lastZEROError()": FunctionFragment;
    "lastZUSDLossError_Offset()": FunctionFragment;
    "liquityBaseParams()": FunctionFragment;
    "offset(uint256,uint256)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "provideToSP(uint256,address)": FunctionFragment;
    "registerFrontEnd(uint256)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address,address,address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "sortedTroves()": FunctionFragment;
    "troveManager()": FunctionFragment;
    "withdrawETHGainToTrove(address,address)": FunctionFragment;
    "withdrawFromSP(uint256)": FunctionFragment;
    "zusdToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_NET_DEBT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "P", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SCALE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZUSD_GAS_COMPENSATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityIssuance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositSnapshots",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "epochToScaleToG",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochToScaleToSum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frontEndSnapshots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "frontEndStakes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "frontEnds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCompoundedFrontEndStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompoundedZUSDDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorETHGain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorZEROGain",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFrontEndZEROGain",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalZUSDDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastETHError_Offset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastZEROError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastZUSDLossError_Offset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquityBaseParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offset",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideToSP",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFrontEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHGainToTrove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromSP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zusdToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_NET_DEBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "P", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SCALE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZUSD_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochToScaleToG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochToScaleToSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frontEndSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frontEndStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frontEnds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundedFrontEndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundedZUSDDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorETHGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorZEROGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFrontEndZEROGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalZUSDDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastETHError_Offset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastZEROError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastZUSDLossError_Offset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquityBaseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideToSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFrontEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zusdToken", data: BytesLike): Result;

  events: {
    "ActivePoolAddressChanged(address)": EventFragment;
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "CommunityIssuanceAddressChanged(address)": EventFragment;
    "DefaultPoolAddressChanged(address)": EventFragment;
    "DepositSnapshotUpdated(address,uint256,uint256,uint256)": EventFragment;
    "ETHGainWithdrawn(address,uint256,uint256)": EventFragment;
    "EpochUpdated(uint128)": EventFragment;
    "EtherSent(address,uint256)": EventFragment;
    "FrontEndRegistered(address,uint256)": EventFragment;
    "FrontEndSnapshotUpdated(address,uint256,uint256)": EventFragment;
    "FrontEndStakeChanged(address,uint256,address)": EventFragment;
    "FrontEndTagSet(address,address)": EventFragment;
    "G_Updated(uint256,uint128,uint128)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "P_Updated(uint256)": EventFragment;
    "PriceFeedAddressChanged(address)": EventFragment;
    "S_Updated(uint256,uint128,uint128)": EventFragment;
    "ScaleUpdated(uint128)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolETHBalanceUpdated(uint256)": EventFragment;
    "StabilityPoolZUSDBalanceUpdated(uint256)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "UserDepositChanged(address,uint256)": EventFragment;
    "ZEROPaidToDepositor(address,uint256)": EventFragment;
    "ZEROPaidToFrontEnd(address,uint256)": EventFragment;
    "ZUSDTokenAddressChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommunityIssuanceAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSnapshotUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHGainWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FrontEndRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FrontEndSnapshotUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FrontEndStakeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FrontEndTagSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "G_Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "P_Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "S_Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScaleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolETHBalanceUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolZUSDBalanceUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDepositChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZEROPaidToDepositor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZEROPaidToFrontEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZUSDTokenAddressChanged"): EventFragment;
}

export type ActivePoolAddressChangedEvent = TypedEvent<
  [string] & { _newActivePoolAddress: string }
>;

export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string] & { _newBorrowerOperationsAddress: string }
>;

export type CommunityIssuanceAddressChangedEvent = TypedEvent<
  [string] & { _newCommunityIssuanceAddress: string }
>;

export type DefaultPoolAddressChangedEvent = TypedEvent<
  [string] & { _newDefaultPoolAddress: string }
>;

export type DepositSnapshotUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _depositor: string;
    _P: BigNumber;
    _S: BigNumber;
    _G: BigNumber;
  }
>;

export type ETHGainWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _depositor: string;
    _ETH: BigNumber;
    _ZUSDLoss: BigNumber;
  }
>;

export type EpochUpdatedEvent = TypedEvent<
  [BigNumber] & { _currentEpoch: BigNumber }
>;

export type EtherSentEvent = TypedEvent<
  [string, BigNumber] & { _to: string; _amount: BigNumber }
>;

export type FrontEndRegisteredEvent = TypedEvent<
  [string, BigNumber] & { _frontEnd: string; _kickbackRate: BigNumber }
>;

export type FrontEndSnapshotUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _frontEnd: string;
    _P: BigNumber;
    _G: BigNumber;
  }
>;

export type FrontEndStakeChangedEvent = TypedEvent<
  [string, BigNumber, string] & {
    _frontEnd: string;
    _newFrontEndStake: BigNumber;
    _depositor: string;
  }
>;

export type FrontEndTagSetEvent = TypedEvent<
  [string, string] & { _depositor: string; _frontEnd: string }
>;

export type G_UpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    _G: BigNumber;
    _epoch: BigNumber;
    _scale: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type P_UpdatedEvent = TypedEvent<[BigNumber] & { _P: BigNumber }>;

export type PriceFeedAddressChangedEvent = TypedEvent<
  [string] & { _newPriceFeedAddress: string }
>;

export type S_UpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    _S: BigNumber;
    _epoch: BigNumber;
    _scale: BigNumber;
  }
>;

export type ScaleUpdatedEvent = TypedEvent<
  [BigNumber] & { _currentScale: BigNumber }
>;

export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string] & { _newSortedTrovesAddress: string }
>;

export type StabilityPoolETHBalanceUpdatedEvent = TypedEvent<
  [BigNumber] & { _newBalance: BigNumber }
>;

export type StabilityPoolZUSDBalanceUpdatedEvent = TypedEvent<
  [BigNumber] & { _newBalance: BigNumber }
>;

export type TroveManagerAddressChangedEvent = TypedEvent<
  [string] & { _newTroveManagerAddress: string }
>;

export type UserDepositChangedEvent = TypedEvent<
  [string, BigNumber] & { _depositor: string; _newDeposit: BigNumber }
>;

export type ZEROPaidToDepositorEvent = TypedEvent<
  [string, BigNumber] & { _depositor: string; _ZERO: BigNumber }
>;

export type ZEROPaidToFrontEndEvent = TypedEvent<
  [string, BigNumber] & { _frontEnd: string; _ZERO: BigNumber }
>;

export type ZUSDTokenAddressChangedEvent = TypedEvent<
  [string] & { _newZUSDTokenAddress: string }
>;

export class StabilityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StabilityPoolInterface;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    P(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _100pct(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    borrowerOperations(overrides?: CallOverrides): Promise<[string]>;

    communityIssuance(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    depositSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { initialValue: BigNumber; frontEndTag: string }
    >;

    epochToScaleToG(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochToScaleToSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    frontEndSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    frontEndStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    frontEnds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { kickbackRate: BigNumber; registered: boolean }
    >;

    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCompoundedZUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositorZEROGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getFrontEndZEROGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string] & { _owner: string }>;

    getTotalZUSDDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastZEROError(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastZUSDLossError_Offset(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquityBaseParams(overrides?: CallOverrides): Promise<[string]>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zusdToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  P(overrides?: CallOverrides): Promise<BigNumber>;

  SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

  _100pct(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  borrowerOperations(overrides?: CallOverrides): Promise<string>;

  communityIssuance(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentScale(overrides?: CallOverrides): Promise<BigNumber>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  depositSnapshots(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      S: BigNumber;
      P: BigNumber;
      G: BigNumber;
      scale: BigNumber;
      epoch: BigNumber;
    }
  >;

  deposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { initialValue: BigNumber; frontEndTag: string }
  >;

  epochToScaleToG(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochToScaleToSum(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  frontEndSnapshots(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      S: BigNumber;
      P: BigNumber;
      G: BigNumber;
      scale: BigNumber;
      epoch: BigNumber;
    }
  >;

  frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  frontEnds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { kickbackRate: BigNumber; registered: boolean }
  >;

  getCompoundedFrontEndStake(
    _frontEnd: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCompoundedZUSDDeposit(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositorETHGain(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositorZEROGain(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getETH(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getFrontEndZEROGain(
    _frontEnd: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getTotalZUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  lastETHError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

  lastZEROError(overrides?: CallOverrides): Promise<BigNumber>;

  lastZUSDLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

  liquityBaseParams(overrides?: CallOverrides): Promise<string>;

  offset(
    _debtToOffset: BigNumberish,
    _collToAdd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  provideToSP(
    _amount: BigNumberish,
    _frontEndTag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerFrontEnd(
    _kickbackRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _liquityBaseParamsAddress: string,
    _borrowerOperationsAddress: string,
    _troveManagerAddress: string,
    _activePoolAddress: string,
    _zusdTokenAddress: string,
    _sortedTrovesAddress: string,
    _priceFeedAddress: string,
    _communityIssuanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  withdrawETHGainToTrove(
    _upperHint: string,
    _lowerHint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zusdToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    P(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    borrowerOperations(overrides?: CallOverrides): Promise<string>;

    communityIssuance(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentScale(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    depositSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { initialValue: BigNumber; frontEndTag: string }
    >;

    epochToScaleToG(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochToScaleToSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    frontEndSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    frontEnds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { kickbackRate: BigNumber; registered: boolean }
    >;

    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompoundedZUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorZEROGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getFrontEndZEROGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getTotalZUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lastZEROError(overrides?: CallOverrides): Promise<BigNumber>;

    lastZUSDLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    liquityBaseParams(overrides?: CallOverrides): Promise<string>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    troveManager(overrides?: CallOverrides): Promise<string>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zusdToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ActivePoolAddressChanged(address)"(
      _newActivePoolAddress?: null
    ): TypedEventFilter<[string], { _newActivePoolAddress: string }>;

    ActivePoolAddressChanged(
      _newActivePoolAddress?: null
    ): TypedEventFilter<[string], { _newActivePoolAddress: string }>;

    "BorrowerOperationsAddressChanged(address)"(
      _newBorrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _newBorrowerOperationsAddress: string }>;

    BorrowerOperationsAddressChanged(
      _newBorrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _newBorrowerOperationsAddress: string }>;

    "CommunityIssuanceAddressChanged(address)"(
      _newCommunityIssuanceAddress?: null
    ): TypedEventFilter<[string], { _newCommunityIssuanceAddress: string }>;

    CommunityIssuanceAddressChanged(
      _newCommunityIssuanceAddress?: null
    ): TypedEventFilter<[string], { _newCommunityIssuanceAddress: string }>;

    "DefaultPoolAddressChanged(address)"(
      _newDefaultPoolAddress?: null
    ): TypedEventFilter<[string], { _newDefaultPoolAddress: string }>;

    DefaultPoolAddressChanged(
      _newDefaultPoolAddress?: null
    ): TypedEventFilter<[string], { _newDefaultPoolAddress: string }>;

    "DepositSnapshotUpdated(address,uint256,uint256,uint256)"(
      _depositor?: string | null,
      _P?: null,
      _S?: null,
      _G?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { _depositor: string; _P: BigNumber; _S: BigNumber; _G: BigNumber }
    >;

    DepositSnapshotUpdated(
      _depositor?: string | null,
      _P?: null,
      _S?: null,
      _G?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { _depositor: string; _P: BigNumber; _S: BigNumber; _G: BigNumber }
    >;

    "ETHGainWithdrawn(address,uint256,uint256)"(
      _depositor?: string | null,
      _ETH?: null,
      _ZUSDLoss?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _depositor: string; _ETH: BigNumber; _ZUSDLoss: BigNumber }
    >;

    ETHGainWithdrawn(
      _depositor?: string | null,
      _ETH?: null,
      _ZUSDLoss?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _depositor: string; _ETH: BigNumber; _ZUSDLoss: BigNumber }
    >;

    "EpochUpdated(uint128)"(
      _currentEpoch?: null
    ): TypedEventFilter<[BigNumber], { _currentEpoch: BigNumber }>;

    EpochUpdated(
      _currentEpoch?: null
    ): TypedEventFilter<[BigNumber], { _currentEpoch: BigNumber }>;

    "EtherSent(address,uint256)"(
      _to?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _to: string; _amount: BigNumber }
    >;

    EtherSent(
      _to?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _to: string; _amount: BigNumber }
    >;

    "FrontEndRegistered(address,uint256)"(
      _frontEnd?: string | null,
      _kickbackRate?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _frontEnd: string; _kickbackRate: BigNumber }
    >;

    FrontEndRegistered(
      _frontEnd?: string | null,
      _kickbackRate?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _frontEnd: string; _kickbackRate: BigNumber }
    >;

    "FrontEndSnapshotUpdated(address,uint256,uint256)"(
      _frontEnd?: string | null,
      _P?: null,
      _G?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _frontEnd: string; _P: BigNumber; _G: BigNumber }
    >;

    FrontEndSnapshotUpdated(
      _frontEnd?: string | null,
      _P?: null,
      _G?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _frontEnd: string; _P: BigNumber; _G: BigNumber }
    >;

    "FrontEndStakeChanged(address,uint256,address)"(
      _frontEnd?: string | null,
      _newFrontEndStake?: null,
      _depositor?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { _frontEnd: string; _newFrontEndStake: BigNumber; _depositor: string }
    >;

    FrontEndStakeChanged(
      _frontEnd?: string | null,
      _newFrontEndStake?: null,
      _depositor?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { _frontEnd: string; _newFrontEndStake: BigNumber; _depositor: string }
    >;

    "FrontEndTagSet(address,address)"(
      _depositor?: string | null,
      _frontEnd?: string | null
    ): TypedEventFilter<
      [string, string],
      { _depositor: string; _frontEnd: string }
    >;

    FrontEndTagSet(
      _depositor?: string | null,
      _frontEnd?: string | null
    ): TypedEventFilter<
      [string, string],
      { _depositor: string; _frontEnd: string }
    >;

    "G_Updated(uint256,uint128,uint128)"(
      _G?: null,
      _epoch?: null,
      _scale?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _G: BigNumber; _epoch: BigNumber; _scale: BigNumber }
    >;

    G_Updated(
      _G?: null,
      _epoch?: null,
      _scale?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _G: BigNumber; _epoch: BigNumber; _scale: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "P_Updated(uint256)"(
      _P?: null
    ): TypedEventFilter<[BigNumber], { _P: BigNumber }>;

    P_Updated(_P?: null): TypedEventFilter<[BigNumber], { _P: BigNumber }>;

    "PriceFeedAddressChanged(address)"(
      _newPriceFeedAddress?: null
    ): TypedEventFilter<[string], { _newPriceFeedAddress: string }>;

    PriceFeedAddressChanged(
      _newPriceFeedAddress?: null
    ): TypedEventFilter<[string], { _newPriceFeedAddress: string }>;

    "S_Updated(uint256,uint128,uint128)"(
      _S?: null,
      _epoch?: null,
      _scale?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _S: BigNumber; _epoch: BigNumber; _scale: BigNumber }
    >;

    S_Updated(
      _S?: null,
      _epoch?: null,
      _scale?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _S: BigNumber; _epoch: BigNumber; _scale: BigNumber }
    >;

    "ScaleUpdated(uint128)"(
      _currentScale?: null
    ): TypedEventFilter<[BigNumber], { _currentScale: BigNumber }>;

    ScaleUpdated(
      _currentScale?: null
    ): TypedEventFilter<[BigNumber], { _currentScale: BigNumber }>;

    "SortedTrovesAddressChanged(address)"(
      _newSortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _newSortedTrovesAddress: string }>;

    SortedTrovesAddressChanged(
      _newSortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _newSortedTrovesAddress: string }>;

    "StabilityPoolETHBalanceUpdated(uint256)"(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    StabilityPoolETHBalanceUpdated(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    "StabilityPoolZUSDBalanceUpdated(uint256)"(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    StabilityPoolZUSDBalanceUpdated(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TypedEventFilter<[string], { _newTroveManagerAddress: string }>;

    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TypedEventFilter<[string], { _newTroveManagerAddress: string }>;

    "UserDepositChanged(address,uint256)"(
      _depositor?: string | null,
      _newDeposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _depositor: string; _newDeposit: BigNumber }
    >;

    UserDepositChanged(
      _depositor?: string | null,
      _newDeposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _depositor: string; _newDeposit: BigNumber }
    >;

    "ZEROPaidToDepositor(address,uint256)"(
      _depositor?: string | null,
      _ZERO?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _depositor: string; _ZERO: BigNumber }
    >;

    ZEROPaidToDepositor(
      _depositor?: string | null,
      _ZERO?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _depositor: string; _ZERO: BigNumber }
    >;

    "ZEROPaidToFrontEnd(address,uint256)"(
      _frontEnd?: string | null,
      _ZERO?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _frontEnd: string; _ZERO: BigNumber }
    >;

    ZEROPaidToFrontEnd(
      _frontEnd?: string | null,
      _ZERO?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _frontEnd: string; _ZERO: BigNumber }
    >;

    "ZUSDTokenAddressChanged(address)"(
      _newZUSDTokenAddress?: null
    ): TypedEventFilter<[string], { _newZUSDTokenAddress: string }>;

    ZUSDTokenAddressChanged(
      _newZUSDTokenAddress?: null
    ): TypedEventFilter<[string], { _newZUSDTokenAddress: string }>;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    P(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    communityIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentScale(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    depositSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    epochToScaleToG(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochToScaleToSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    frontEndSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    frontEnds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompoundedZUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorZEROGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getFrontEndZEROGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalZUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lastZEROError(overrides?: CallOverrides): Promise<BigNumber>;

    lastZUSDLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    liquityBaseParams(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zusdToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    P(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZUSD_GAS_COMPENSATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _100pct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochToScaleToG(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochToScaleToSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frontEndSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frontEndStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frontEnds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompoundedZUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositorZEROGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFrontEndZEROGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalZUSDDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastETHError_Offset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastZEROError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastZUSDLossError_Offset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquityBaseParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zusdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
