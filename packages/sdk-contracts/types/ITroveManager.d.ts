/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITroveManagerInterface extends ethers.utils.Interface {
  functions: {
    "CCR()": FunctionFragment;
    "MCR()": FunctionFragment;
    "addTroveOwnerToArray(address)": FunctionFragment;
    "applyPendingRewards(address)": FunctionFragment;
    "batchLiquidateTroves(address[])": FunctionFragment;
    "checkRecoveryMode(uint256)": FunctionFragment;
    "closeTrove(address)": FunctionFragment;
    "decayBaseRateFromBorrowing()": FunctionFragment;
    "decreaseTroveColl(address,uint256)": FunctionFragment;
    "decreaseTroveDebt(address,uint256)": FunctionFragment;
    "getBorrowingFee(uint256)": FunctionFragment;
    "getBorrowingFeeWithDecay(uint256)": FunctionFragment;
    "getBorrowingRate()": FunctionFragment;
    "getBorrowingRateWithDecay()": FunctionFragment;
    "getCurrentICR(address,uint256)": FunctionFragment;
    "getEntireDebtAndColl(address)": FunctionFragment;
    "getNominalICR(address)": FunctionFragment;
    "getPendingETHReward(address)": FunctionFragment;
    "getPendingZUSDDebtReward(address)": FunctionFragment;
    "getRedemptionFeeWithDecay(uint256)": FunctionFragment;
    "getRedemptionRate()": FunctionFragment;
    "getRedemptionRateWithDecay()": FunctionFragment;
    "getTCR(uint256)": FunctionFragment;
    "getTroveColl(address)": FunctionFragment;
    "getTroveDebt(address)": FunctionFragment;
    "getTroveFromTroveOwnersArray(uint256)": FunctionFragment;
    "getTroveOwnersCount()": FunctionFragment;
    "getTroveStake(address)": FunctionFragment;
    "getTroveStatus(address)": FunctionFragment;
    "hasPendingRewards(address)": FunctionFragment;
    "increaseTroveColl(address,uint256)": FunctionFragment;
    "increaseTroveDebt(address,uint256)": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "liquidateTroves(uint256)": FunctionFragment;
    "liquityBaseParams()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "redeemCollateral(uint256,address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "removeStake(address)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "setTroveStatus(address,uint256)": FunctionFragment;
    "updateStakeAndTotalStakes(address)": FunctionFragment;
    "updateTroveRewardSnapshots(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTroveOwnerToArray",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "applyPendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchLiquidateTroves",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRecoveryMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "closeTrove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "decayBaseRateFromBorrowing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTroveColl",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTroveDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingFeeWithDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRateWithDecay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentICR",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireDebtAndColl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNominalICR",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingETHReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingZUSDDebtReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionFeeWithDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRateWithDecay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTCR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveColl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveFromTroveOwnersArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveOwnersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTroveColl",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTroveDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidateTroves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquityBaseParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemCollateral",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "removeStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTroveStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeAndTotalStakes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTroveRewardSnapshots",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTroveOwnerToArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchLiquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decayBaseRateFromBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingFeeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireDebtAndColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNominalICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingETHReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingZUSDDebtReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionFeeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveFromTroveOwnersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveOwnersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquityBaseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeAndTotalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTroveRewardSnapshots",
    data: BytesLike
  ): Result;

  events: {
    "ActivePoolAddressChanged(address)": EventFragment;
    "BaseRateUpdated(uint256)": EventFragment;
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "CollSurplusPoolAddressChanged(address)": EventFragment;
    "DefaultPoolAddressChanged(address)": EventFragment;
    "FeeDistributorAddressChanged(address)": EventFragment;
    "GasPoolAddressChanged(address)": EventFragment;
    "LTermsUpdated(uint256,uint256)": EventFragment;
    "LastFeeOpTimeUpdated(uint256)": EventFragment;
    "Liquidation(uint256,uint256,uint256,uint256)": EventFragment;
    "LiquityBaseParamsAddressChanges(address)": EventFragment;
    "PriceFeedAddressChanged(address)": EventFragment;
    "Redemption(uint256,uint256,uint256,uint256)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolAddressChanged(address)": EventFragment;
    "SystemSnapshotsUpdated(uint256,uint256)": EventFragment;
    "TotalStakesUpdated(uint256)": EventFragment;
    "TroveIndexUpdated(address,uint256)": EventFragment;
    "TroveLiquidated(address,uint256,uint256,uint8)": EventFragment;
    "TroveManagerRedeemOpsAddressChanged(address)": EventFragment;
    "TroveSnapshotsUpdated(uint256,uint256)": EventFragment;
    "TroveUpdated(address,uint256,uint256,uint256,uint8)": EventFragment;
    "ZEROStakingAddressChanged(address)": EventFragment;
    "ZEROTokenAddressChanged(address)": EventFragment;
    "ZUSDTokenAddressChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollSurplusPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeeDistributorAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LTermsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LastFeeOpTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquityBaseParamsAddressChanges"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemSnapshotsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalStakesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveLiquidated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TroveManagerRedeemOpsAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveSnapshotsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZEROStakingAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZEROTokenAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZUSDTokenAddressChanged"): EventFragment;
}

export type ActivePoolAddressChangedEvent = TypedEvent<
  [string] & { _activePoolAddress: string }
>;

export type BaseRateUpdatedEvent = TypedEvent<
  [BigNumber] & { _baseRate: BigNumber }
>;

export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string] & { _newBorrowerOperationsAddress: string }
>;

export type CollSurplusPoolAddressChangedEvent = TypedEvent<
  [string] & { _collSurplusPoolAddress: string }
>;

export type DefaultPoolAddressChangedEvent = TypedEvent<
  [string] & { _defaultPoolAddress: string }
>;

export type FeeDistributorAddressChangedEvent = TypedEvent<
  [string] & { _feeDistributorAddress: string }
>;

export type GasPoolAddressChangedEvent = TypedEvent<
  [string] & { _gasPoolAddress: string }
>;

export type LTermsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _L_ETH: BigNumber; _L_ZUSDDebt: BigNumber }
>;

export type LastFeeOpTimeUpdatedEvent = TypedEvent<
  [BigNumber] & { _lastFeeOpTime: BigNumber }
>;

export type LiquidationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    _liquidatedDebt: BigNumber;
    _liquidatedColl: BigNumber;
    _collGasCompensation: BigNumber;
    _ZUSDGasCompensation: BigNumber;
  }
>;

export type LiquityBaseParamsAddressChangesEvent = TypedEvent<
  [string] & { _borrowerOperationsAddress: string }
>;

export type PriceFeedAddressChangedEvent = TypedEvent<
  [string] & { _newPriceFeedAddress: string }
>;

export type RedemptionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    _attemptedZUSDAmount: BigNumber;
    _actualZUSDAmount: BigNumber;
    _ETHSent: BigNumber;
    _ETHFee: BigNumber;
  }
>;

export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string] & { _sortedTrovesAddress: string }
>;

export type StabilityPoolAddressChangedEvent = TypedEvent<
  [string] & { _stabilityPoolAddress: string }
>;

export type SystemSnapshotsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    _totalStakesSnapshot: BigNumber;
    _totalCollateralSnapshot: BigNumber;
  }
>;

export type TotalStakesUpdatedEvent = TypedEvent<
  [BigNumber] & { _newTotalStakes: BigNumber }
>;

export type TroveIndexUpdatedEvent = TypedEvent<
  [string, BigNumber] & { _borrower: string; _newIndex: BigNumber }
>;

export type TroveLiquidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number] & {
    _borrower: string;
    _debt: BigNumber;
    _coll: BigNumber;
    operation: number;
  }
>;

export type TroveManagerRedeemOpsAddressChangedEvent = TypedEvent<
  [string] & { _troveManagerRedeemOps: string }
>;

export type TroveSnapshotsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _L_ETH: BigNumber; _L_ZUSDDebt: BigNumber }
>;

export type TroveUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number] & {
    _borrower: string;
    _debt: BigNumber;
    _coll: BigNumber;
    stake: BigNumber;
    operation: number;
  }
>;

export type ZEROStakingAddressChangedEvent = TypedEvent<
  [string] & { _zeroStakingAddress: string }
>;

export type ZEROTokenAddressChangedEvent = TypedEvent<
  [string] & { _zeroTokenAddress: string }
>;

export type ZUSDTokenAddressChangedEvent = TypedEvent<
  [string] & { _newZUSDTokenAddress: string }
>;

export class ITroveManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITroveManagerInterface;

  functions: {
    CCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTroveOwnerToArray(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyPendingRewards(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchLiquidateTroves(
      _troveArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkRecoveryMode(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeTrove(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decayBaseRateFromBorrowing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseTroveColl(
      _borrower: string,
      _collDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseTroveDebt(
      _borrower: string,
      _debtDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBorrowingFee(
      ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowingFeeWithDecay(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowingRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentICR(
      _borrower: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingZUSDDebtReward: BigNumber;
        pendingETHReward: BigNumber;
      }
    >;

    getNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingETHReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingZUSDDebtReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionFeeWithDecay(
      _ETHDrawn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionRateWithDecay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTCR(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveDebt(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveFromTroveOwnersArray(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTroveOwnersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTroveStake(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveStatus(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPendingRewards(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseTroveColl(
      _borrower: string,
      _collIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseTroveDebt(
      _borrower: string,
      _debtIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTroves(
      _n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquityBaseParams(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    redeemCollateral(
      _ZUSDAmount: BigNumberish,
      _firstRedemptionHint: string,
      _upperPartialRedemptionHint: string,
      _lowerPartialRedemptionHint: string,
      _partialRedemptionHintNICR: BigNumberish,
      _maxIterations: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeStake(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _feeDistributorAddress: string,
      _troveManagerRedeemOps: string,
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _zeroTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTroveStatus(
      _borrower: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStakeAndTotalStakes(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTroveRewardSnapshots(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CCR(overrides?: CallOverrides): Promise<BigNumber>;

  MCR(overrides?: CallOverrides): Promise<BigNumber>;

  addTroveOwnerToArray(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyPendingRewards(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchLiquidateTroves(
    _troveArray: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkRecoveryMode(
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeTrove(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decayBaseRateFromBorrowing(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseTroveColl(
    _borrower: string,
    _collDecrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseTroveDebt(
    _borrower: string,
    _debtDecrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBorrowingFee(
    ZUSDDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowingFeeWithDecay(
    _ZUSDDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowingRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentICR(
    _borrower: string,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireDebtAndColl(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      coll: BigNumber;
      pendingZUSDDebtReward: BigNumber;
      pendingETHReward: BigNumber;
    }
  >;

  getNominalICR(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingETHReward(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingZUSDDebtReward(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionFeeWithDecay(
    _ETHDrawn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionRate(overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

  getTCR(_price: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getTroveColl(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveDebt(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveFromTroveOwnersArray(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTroveOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTroveStake(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveStatus(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPendingRewards(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseTroveColl(
    _borrower: string,
    _collIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseTroveDebt(
    _borrower: string,
    _debtIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTroves(
    _n: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquityBaseParams(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  redeemCollateral(
    _ZUSDAmount: BigNumberish,
    _firstRedemptionHint: string,
    _upperPartialRedemptionHint: string,
    _lowerPartialRedemptionHint: string,
    _partialRedemptionHintNICR: BigNumberish,
    _maxIterations: BigNumberish,
    _maxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeStake(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _feeDistributorAddress: string,
    _troveManagerRedeemOps: string,
    _liquityBaseParamsAddress: string,
    _borrowerOperationsAddress: string,
    _activePoolAddress: string,
    _defaultPoolAddress: string,
    _stabilityPoolAddress: string,
    _gasPoolAddress: string,
    _collSurplusPoolAddress: string,
    _priceFeedAddress: string,
    _zusdTokenAddress: string,
    _sortedTrovesAddress: string,
    _zeroTokenAddress: string,
    _zeroStakingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTroveStatus(
    _borrower: string,
    num: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStakeAndTotalStakes(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTroveRewardSnapshots(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CCR(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    addTroveOwnerToArray(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyPendingRewards(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchLiquidateTroves(
      _troveArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkRecoveryMode(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeTrove(_borrower: string, overrides?: CallOverrides): Promise<void>;

    decayBaseRateFromBorrowing(overrides?: CallOverrides): Promise<void>;

    decreaseTroveColl(
      _borrower: string,
      _collDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseTroveDebt(
      _borrower: string,
      _debtDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingFee(
      ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingFeeWithDecay(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentICR(
      _borrower: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingZUSDDebtReward: BigNumber;
        pendingETHReward: BigNumber;
      }
    >;

    getNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingETHReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingZUSDDebtReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      _ETHDrawn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

    getTCR(_price: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTroveColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveDebt(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveFromTroveOwnersArray(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTroveOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTroveStake(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStatus(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingRewards(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseTroveColl(
      _borrower: string,
      _collIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTroveDebt(
      _borrower: string,
      _debtIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(_borrower: string, overrides?: CallOverrides): Promise<void>;

    liquidateTroves(_n: BigNumberish, overrides?: CallOverrides): Promise<void>;

    liquityBaseParams(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    redeemCollateral(
      _ZUSDAmount: BigNumberish,
      _firstRedemptionHint: string,
      _upperPartialRedemptionHint: string,
      _lowerPartialRedemptionHint: string,
      _partialRedemptionHintNICR: BigNumberish,
      _maxIterations: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStake(_borrower: string, overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _feeDistributorAddress: string,
      _troveManagerRedeemOps: string,
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _zeroTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTroveStatus(
      _borrower: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakeAndTotalStakes(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTroveRewardSnapshots(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivePoolAddressChanged(address)"(
      _activePoolAddress?: null
    ): TypedEventFilter<[string], { _activePoolAddress: string }>;

    ActivePoolAddressChanged(
      _activePoolAddress?: null
    ): TypedEventFilter<[string], { _activePoolAddress: string }>;

    "BaseRateUpdated(uint256)"(
      _baseRate?: null
    ): TypedEventFilter<[BigNumber], { _baseRate: BigNumber }>;

    BaseRateUpdated(
      _baseRate?: null
    ): TypedEventFilter<[BigNumber], { _baseRate: BigNumber }>;

    "BorrowerOperationsAddressChanged(address)"(
      _newBorrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _newBorrowerOperationsAddress: string }>;

    BorrowerOperationsAddressChanged(
      _newBorrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _newBorrowerOperationsAddress: string }>;

    "CollSurplusPoolAddressChanged(address)"(
      _collSurplusPoolAddress?: null
    ): TypedEventFilter<[string], { _collSurplusPoolAddress: string }>;

    CollSurplusPoolAddressChanged(
      _collSurplusPoolAddress?: null
    ): TypedEventFilter<[string], { _collSurplusPoolAddress: string }>;

    "DefaultPoolAddressChanged(address)"(
      _defaultPoolAddress?: null
    ): TypedEventFilter<[string], { _defaultPoolAddress: string }>;

    DefaultPoolAddressChanged(
      _defaultPoolAddress?: null
    ): TypedEventFilter<[string], { _defaultPoolAddress: string }>;

    "FeeDistributorAddressChanged(address)"(
      _feeDistributorAddress?: null
    ): TypedEventFilter<[string], { _feeDistributorAddress: string }>;

    FeeDistributorAddressChanged(
      _feeDistributorAddress?: null
    ): TypedEventFilter<[string], { _feeDistributorAddress: string }>;

    "GasPoolAddressChanged(address)"(
      _gasPoolAddress?: null
    ): TypedEventFilter<[string], { _gasPoolAddress: string }>;

    GasPoolAddressChanged(
      _gasPoolAddress?: null
    ): TypedEventFilter<[string], { _gasPoolAddress: string }>;

    "LTermsUpdated(uint256,uint256)"(
      _L_ETH?: null,
      _L_ZUSDDebt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _L_ETH: BigNumber; _L_ZUSDDebt: BigNumber }
    >;

    LTermsUpdated(
      _L_ETH?: null,
      _L_ZUSDDebt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _L_ETH: BigNumber; _L_ZUSDDebt: BigNumber }
    >;

    "LastFeeOpTimeUpdated(uint256)"(
      _lastFeeOpTime?: null
    ): TypedEventFilter<[BigNumber], { _lastFeeOpTime: BigNumber }>;

    LastFeeOpTimeUpdated(
      _lastFeeOpTime?: null
    ): TypedEventFilter<[BigNumber], { _lastFeeOpTime: BigNumber }>;

    "Liquidation(uint256,uint256,uint256,uint256)"(
      _liquidatedDebt?: null,
      _liquidatedColl?: null,
      _collGasCompensation?: null,
      _ZUSDGasCompensation?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _liquidatedDebt: BigNumber;
        _liquidatedColl: BigNumber;
        _collGasCompensation: BigNumber;
        _ZUSDGasCompensation: BigNumber;
      }
    >;

    Liquidation(
      _liquidatedDebt?: null,
      _liquidatedColl?: null,
      _collGasCompensation?: null,
      _ZUSDGasCompensation?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _liquidatedDebt: BigNumber;
        _liquidatedColl: BigNumber;
        _collGasCompensation: BigNumber;
        _ZUSDGasCompensation: BigNumber;
      }
    >;

    "LiquityBaseParamsAddressChanges(address)"(
      _borrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _borrowerOperationsAddress: string }>;

    LiquityBaseParamsAddressChanges(
      _borrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _borrowerOperationsAddress: string }>;

    "PriceFeedAddressChanged(address)"(
      _newPriceFeedAddress?: null
    ): TypedEventFilter<[string], { _newPriceFeedAddress: string }>;

    PriceFeedAddressChanged(
      _newPriceFeedAddress?: null
    ): TypedEventFilter<[string], { _newPriceFeedAddress: string }>;

    "Redemption(uint256,uint256,uint256,uint256)"(
      _attemptedZUSDAmount?: null,
      _actualZUSDAmount?: null,
      _ETHSent?: null,
      _ETHFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _attemptedZUSDAmount: BigNumber;
        _actualZUSDAmount: BigNumber;
        _ETHSent: BigNumber;
        _ETHFee: BigNumber;
      }
    >;

    Redemption(
      _attemptedZUSDAmount?: null,
      _actualZUSDAmount?: null,
      _ETHSent?: null,
      _ETHFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _attemptedZUSDAmount: BigNumber;
        _actualZUSDAmount: BigNumber;
        _ETHSent: BigNumber;
        _ETHFee: BigNumber;
      }
    >;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _sortedTrovesAddress: string }>;

    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _sortedTrovesAddress: string }>;

    "StabilityPoolAddressChanged(address)"(
      _stabilityPoolAddress?: null
    ): TypedEventFilter<[string], { _stabilityPoolAddress: string }>;

    StabilityPoolAddressChanged(
      _stabilityPoolAddress?: null
    ): TypedEventFilter<[string], { _stabilityPoolAddress: string }>;

    "SystemSnapshotsUpdated(uint256,uint256)"(
      _totalStakesSnapshot?: null,
      _totalCollateralSnapshot?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _totalStakesSnapshot: BigNumber; _totalCollateralSnapshot: BigNumber }
    >;

    SystemSnapshotsUpdated(
      _totalStakesSnapshot?: null,
      _totalCollateralSnapshot?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _totalStakesSnapshot: BigNumber; _totalCollateralSnapshot: BigNumber }
    >;

    "TotalStakesUpdated(uint256)"(
      _newTotalStakes?: null
    ): TypedEventFilter<[BigNumber], { _newTotalStakes: BigNumber }>;

    TotalStakesUpdated(
      _newTotalStakes?: null
    ): TypedEventFilter<[BigNumber], { _newTotalStakes: BigNumber }>;

    "TroveIndexUpdated(address,uint256)"(
      _borrower?: null,
      _newIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _borrower: string; _newIndex: BigNumber }
    >;

    TroveIndexUpdated(
      _borrower?: null,
      _newIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _borrower: string; _newIndex: BigNumber }
    >;

    "TroveLiquidated(address,uint256,uint256,uint8)"(
      _borrower?: string | null,
      _debt?: null,
      _coll?: null,
      operation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number],
      {
        _borrower: string;
        _debt: BigNumber;
        _coll: BigNumber;
        operation: number;
      }
    >;

    TroveLiquidated(
      _borrower?: string | null,
      _debt?: null,
      _coll?: null,
      operation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number],
      {
        _borrower: string;
        _debt: BigNumber;
        _coll: BigNumber;
        operation: number;
      }
    >;

    "TroveManagerRedeemOpsAddressChanged(address)"(
      _troveManagerRedeemOps?: null
    ): TypedEventFilter<[string], { _troveManagerRedeemOps: string }>;

    TroveManagerRedeemOpsAddressChanged(
      _troveManagerRedeemOps?: null
    ): TypedEventFilter<[string], { _troveManagerRedeemOps: string }>;

    "TroveSnapshotsUpdated(uint256,uint256)"(
      _L_ETH?: null,
      _L_ZUSDDebt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _L_ETH: BigNumber; _L_ZUSDDebt: BigNumber }
    >;

    TroveSnapshotsUpdated(
      _L_ETH?: null,
      _L_ZUSDDebt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _L_ETH: BigNumber; _L_ZUSDDebt: BigNumber }
    >;

    "TroveUpdated(address,uint256,uint256,uint256,uint8)"(
      _borrower?: string | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number],
      {
        _borrower: string;
        _debt: BigNumber;
        _coll: BigNumber;
        stake: BigNumber;
        operation: number;
      }
    >;

    TroveUpdated(
      _borrower?: string | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number],
      {
        _borrower: string;
        _debt: BigNumber;
        _coll: BigNumber;
        stake: BigNumber;
        operation: number;
      }
    >;

    "ZEROStakingAddressChanged(address)"(
      _zeroStakingAddress?: null
    ): TypedEventFilter<[string], { _zeroStakingAddress: string }>;

    ZEROStakingAddressChanged(
      _zeroStakingAddress?: null
    ): TypedEventFilter<[string], { _zeroStakingAddress: string }>;

    "ZEROTokenAddressChanged(address)"(
      _zeroTokenAddress?: null
    ): TypedEventFilter<[string], { _zeroTokenAddress: string }>;

    ZEROTokenAddressChanged(
      _zeroTokenAddress?: null
    ): TypedEventFilter<[string], { _zeroTokenAddress: string }>;

    "ZUSDTokenAddressChanged(address)"(
      _newZUSDTokenAddress?: null
    ): TypedEventFilter<[string], { _newZUSDTokenAddress: string }>;

    ZUSDTokenAddressChanged(
      _newZUSDTokenAddress?: null
    ): TypedEventFilter<[string], { _newZUSDTokenAddress: string }>;
  };

  estimateGas: {
    CCR(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    addTroveOwnerToArray(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyPendingRewards(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchLiquidateTroves(
      _troveArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkRecoveryMode(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeTrove(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decayBaseRateFromBorrowing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseTroveColl(
      _borrower: string,
      _collDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseTroveDebt(
      _borrower: string,
      _debtDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBorrowingFee(
      ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingFeeWithDecay(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentICR(
      _borrower: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingETHReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingZUSDDebtReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      _ETHDrawn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

    getTCR(_price: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTroveColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveDebt(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveFromTroveOwnersArray(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTroveStake(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStatus(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingRewards(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTroveColl(
      _borrower: string,
      _collIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseTroveDebt(
      _borrower: string,
      _debtIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTroves(
      _n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquityBaseParams(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    redeemCollateral(
      _ZUSDAmount: BigNumberish,
      _firstRedemptionHint: string,
      _upperPartialRedemptionHint: string,
      _lowerPartialRedemptionHint: string,
      _partialRedemptionHintNICR: BigNumberish,
      _maxIterations: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeStake(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _feeDistributorAddress: string,
      _troveManagerRedeemOps: string,
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _zeroTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTroveStatus(
      _borrower: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStakeAndTotalStakes(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTroveRewardSnapshots(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTroveOwnerToArray(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyPendingRewards(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchLiquidateTroves(
      _troveArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkRecoveryMode(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeTrove(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decayBaseRateFromBorrowing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseTroveColl(
      _borrower: string,
      _collDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseTroveDebt(
      _borrower: string,
      _debtDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowingFee(
      ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowingFeeWithDecay(
      _ZUSDDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowingRateWithDecay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentICR(
      _borrower: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireDebtAndColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNominalICR(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingETHReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingZUSDDebtReward(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionFeeWithDecay(
      _ETHDrawn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionRateWithDecay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTCR(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveColl(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveDebt(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveFromTroveOwnersArray(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveOwnersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveStake(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveStatus(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPendingRewards(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseTroveColl(
      _borrower: string,
      _collIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseTroveDebt(
      _borrower: string,
      _debtIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTroves(
      _n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquityBaseParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemCollateral(
      _ZUSDAmount: BigNumberish,
      _firstRedemptionHint: string,
      _upperPartialRedemptionHint: string,
      _lowerPartialRedemptionHint: string,
      _partialRedemptionHintNICR: BigNumberish,
      _maxIterations: BigNumberish,
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeStake(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _feeDistributorAddress: string,
      _troveManagerRedeemOps: string,
      _liquityBaseParamsAddress: string,
      _borrowerOperationsAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _zusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _zeroTokenAddress: string,
      _zeroStakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTroveStatus(
      _borrower: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStakeAndTotalStakes(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTroveRewardSnapshots(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
