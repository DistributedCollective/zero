/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "fetchPrice()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "lastGoodPrice()": FunctionFragment;
    "setAddress(uint8,address)": FunctionFragment;
    "setAddresses(address,address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fetchPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastGoodPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastGoodPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "LastGoodPriceUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceFeedBroken(uint8,address)": EventFragment;
    "PriceFeedUpdated(uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LastGoodPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedBroken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdated"): EventFragment;
}

export type LastGoodPriceUpdatedEvent = TypedEvent<
  [BigNumber] & { _lastGoodPrice: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceFeedBrokenEvent = TypedEvent<
  [number, string] & { index: number; priceFeedAddress: string }
>;

export type PriceFeedUpdatedEvent = TypedEvent<
  [number, string] & { index: number; newPriceFeedAddress: string }
>;

export class PriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceFeedInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    fetchPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string] & { _owner: string }>;

    lastGoodPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAddress(
      _index: BigNumberish,
      _newPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _mainPriceFeed: string,
      _backupPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  fetchPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  lastGoodPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setAddress(
    _index: BigNumberish,
    _newPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _mainPriceFeed: string,
    _backupPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    fetchPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    lastGoodPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      _index: BigNumberish,
      _newPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddresses(
      _mainPriceFeed: string,
      _backupPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LastGoodPriceUpdated(uint256)"(
      _lastGoodPrice?: null
    ): TypedEventFilter<[BigNumber], { _lastGoodPrice: BigNumber }>;

    LastGoodPriceUpdated(
      _lastGoodPrice?: null
    ): TypedEventFilter<[BigNumber], { _lastGoodPrice: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceFeedBroken(uint8,address)"(
      index?: null,
      priceFeedAddress?: null
    ): TypedEventFilter<
      [number, string],
      { index: number; priceFeedAddress: string }
    >;

    PriceFeedBroken(
      index?: null,
      priceFeedAddress?: null
    ): TypedEventFilter<
      [number, string],
      { index: number; priceFeedAddress: string }
    >;

    "PriceFeedUpdated(uint8,address)"(
      index?: null,
      newPriceFeedAddress?: null
    ): TypedEventFilter<
      [number, string],
      { index: number; newPriceFeedAddress: string }
    >;

    PriceFeedUpdated(
      index?: null,
      newPriceFeedAddress?: null
    ): TypedEventFilter<
      [number, string],
      { index: number; newPriceFeedAddress: string }
    >;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    fetchPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    lastGoodPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      _index: BigNumberish,
      _newPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _mainPriceFeed: string,
      _backupPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastGoodPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddress(
      _index: BigNumberish,
      _newPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _mainPriceFeed: string,
      _backupPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
