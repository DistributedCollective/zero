/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    "decreaseZUSDDebt(uint256)": FunctionFragment;
    "getETH()": FunctionFragment;
    "getZUSDDebt()": FunctionFragment;
    "increaseZUSDDebt(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreaseZUSDDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getZUSDDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseZUSDDebt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseZUSDDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getZUSDDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseZUSDDebt",
    data: BytesLike
  ): Result;

  events: {
    "ActivePoolAddressChanged(address)": EventFragment;
    "DefaultPoolAddressChanged(address)": EventFragment;
    "ETHBalanceUpdated(uint256)": EventFragment;
    "EtherSent(address,uint256)": EventFragment;
    "StabilityPoolAddressChanged(address)": EventFragment;
    "ZUSDBalanceUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherSent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZUSDBalanceUpdated"): EventFragment;
}

export type ActivePoolAddressChangedEvent = TypedEvent<
  [string] & { _newActivePoolAddress: string }
>;

export type DefaultPoolAddressChangedEvent = TypedEvent<
  [string] & { _newDefaultPoolAddress: string }
>;

export type ETHBalanceUpdatedEvent = TypedEvent<
  [BigNumber] & { _newBalance: BigNumber }
>;

export type EtherSentEvent = TypedEvent<
  [string, BigNumber] & { _to: string; _amount: BigNumber }
>;

export type StabilityPoolAddressChangedEvent = TypedEvent<
  [string] & { _newStabilityPoolAddress: string }
>;

export type ZUSDBalanceUpdatedEvent = TypedEvent<
  [BigNumber] & { _newBalance: BigNumber }
>;

export class IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolInterface;

  functions: {
    decreaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getZUSDDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  decreaseZUSDDebt(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getETH(overrides?: CallOverrides): Promise<BigNumber>;

  getZUSDDebt(overrides?: CallOverrides): Promise<BigNumber>;

  increaseZUSDDebt(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decreaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getZUSDDebt(overrides?: CallOverrides): Promise<BigNumber>;

    increaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivePoolAddressChanged(address)"(
      _newActivePoolAddress?: null
    ): TypedEventFilter<[string], { _newActivePoolAddress: string }>;

    ActivePoolAddressChanged(
      _newActivePoolAddress?: null
    ): TypedEventFilter<[string], { _newActivePoolAddress: string }>;

    "DefaultPoolAddressChanged(address)"(
      _newDefaultPoolAddress?: null
    ): TypedEventFilter<[string], { _newDefaultPoolAddress: string }>;

    DefaultPoolAddressChanged(
      _newDefaultPoolAddress?: null
    ): TypedEventFilter<[string], { _newDefaultPoolAddress: string }>;

    "ETHBalanceUpdated(uint256)"(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    ETHBalanceUpdated(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    "EtherSent(address,uint256)"(
      _to?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _to: string; _amount: BigNumber }
    >;

    EtherSent(
      _to?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _to: string; _amount: BigNumber }
    >;

    "StabilityPoolAddressChanged(address)"(
      _newStabilityPoolAddress?: null
    ): TypedEventFilter<[string], { _newStabilityPoolAddress: string }>;

    StabilityPoolAddressChanged(
      _newStabilityPoolAddress?: null
    ): TypedEventFilter<[string], { _newStabilityPoolAddress: string }>;

    "ZUSDBalanceUpdated(uint256)"(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;

    ZUSDBalanceUpdated(
      _newBalance?: null
    ): TypedEventFilter<[BigNumber], { _newBalance: BigNumber }>;
  };

  estimateGas: {
    decreaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getZUSDDebt(overrides?: CallOverrides): Promise<BigNumber>;

    increaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZUSDDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseZUSDDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
