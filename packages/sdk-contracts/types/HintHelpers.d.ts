/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HintHelpersInterface extends ethers.utils.Interface {
  functions: {
    "DECIMAL_PRECISION()": FunctionFragment;
    "MIN_NET_DEBT()": FunctionFragment;
    "NAME()": FunctionFragment;
    "ZUSD_GAS_COMPENSATION()": FunctionFragment;
    "_100pct()": FunctionFragment;
    "activePool()": FunctionFragment;
    "computeCR(uint256,uint256,uint256)": FunctionFragment;
    "computeNominalCR(uint256,uint256)": FunctionFragment;
    "defaultPool()": FunctionFragment;
    "getApproxHint(uint256,uint256,uint256)": FunctionFragment;
    "getEntireSystemColl()": FunctionFragment;
    "getEntireSystemDebt()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getRedemptionHints(uint256,uint256,uint256)": FunctionFragment;
    "liquityBaseParams()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "setAddresses(address,address,address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "sortedTroves()": FunctionFragment;
    "troveManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_NET_DEBT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZUSD_GAS_COMPENSATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeCR",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNominalCR",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproxHint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRedemptionHints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquityBaseParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_NET_DEBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZUSD_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "computeCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeNominalCR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproxHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionHints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquityBaseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string] & { _sortedTrovesAddress: string }
>;

export type TroveManagerAddressChangedEvent = TypedEvent<
  [string] & { _troveManagerAddress: string }
>;

export class HintHelpers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HintHelpersInterface;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _100pct(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    computeCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeNominalCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    getApproxHint(
      _CR: BigNumberish,
      _numTrials: BigNumberish,
      _inputRandomSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        hintAddress: string;
        diff: BigNumber;
        latestRandomSeed: BigNumber;
      }
    >;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getOwner(overrides?: CallOverrides): Promise<[string] & { _owner: string }>;

    getRedemptionHints(
      _ZUSDamount: BigNumberish,
      _price: BigNumberish,
      _maxIterations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        firstRedemptionHint: string;
        partialRedemptionHintNICR: BigNumber;
        truncatedZUSDamount: BigNumber;
      }
    >;

    liquityBaseParams(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _sortedTrovesAddress: string,
      _troveManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

  _100pct(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  computeCR(
    _coll: BigNumberish,
    _debt: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeNominalCR(
    _coll: BigNumberish,
    _debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  getApproxHint(
    _CR: BigNumberish,
    _numTrials: BigNumberish,
    _inputRandomSeed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      hintAddress: string;
      diff: BigNumber;
      latestRandomSeed: BigNumber;
    }
  >;

  getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getRedemptionHints(
    _ZUSDamount: BigNumberish,
    _price: BigNumberish,
    _maxIterations: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      firstRedemptionHint: string;
      partialRedemptionHintNICR: BigNumber;
      truncatedZUSDamount: BigNumber;
    }
  >;

  liquityBaseParams(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  setAddresses(
    _liquityBaseParamsAddress: string,
    _sortedTrovesAddress: string,
    _troveManagerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    computeCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNominalCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    getApproxHint(
      _CR: BigNumberish,
      _numTrials: BigNumberish,
      _inputRandomSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        hintAddress: string;
        diff: BigNumber;
        latestRandomSeed: BigNumber;
      }
    >;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getRedemptionHints(
      _ZUSDamount: BigNumberish,
      _price: BigNumberish,
      _maxIterations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        firstRedemptionHint: string;
        partialRedemptionHintNICR: BigNumber;
        truncatedZUSDamount: BigNumber;
      }
    >;

    liquityBaseParams(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _sortedTrovesAddress: string,
      _troveManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    troveManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _sortedTrovesAddress: string }>;

    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): TypedEventFilter<[string], { _sortedTrovesAddress: string }>;

    "TroveManagerAddressChanged(address)"(
      _troveManagerAddress?: null
    ): TypedEventFilter<[string], { _troveManagerAddress: string }>;

    TroveManagerAddressChanged(
      _troveManagerAddress?: null
    ): TypedEventFilter<[string], { _troveManagerAddress: string }>;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    ZUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    computeCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNominalCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    getApproxHint(
      _CR: BigNumberish,
      _numTrials: BigNumberish,
      _inputRandomSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionHints(
      _ZUSDamount: BigNumberish,
      _price: BigNumberish,
      _maxIterations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquityBaseParams(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _sortedTrovesAddress: string,
      _troveManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZUSD_GAS_COMPENSATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _100pct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeNominalCR(
      _coll: BigNumberish,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproxHint(
      _CR: BigNumberish,
      _numTrials: BigNumberish,
      _inputRandomSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionHints(
      _ZUSDamount: BigNumberish,
      _price: BigNumberish,
      _maxIterations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquityBaseParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddresses(
      _liquityBaseParamsAddress: string,
      _sortedTrovesAddress: string,
      _troveManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
