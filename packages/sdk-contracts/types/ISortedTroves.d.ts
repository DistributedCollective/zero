/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISortedTrovesInterface extends ethers.utils.Interface {
  functions: {
    "contains(address)": FunctionFragment;
    "findInsertPosition(uint256,address,address)": FunctionFragment;
    "getFirst()": FunctionFragment;
    "getLast()": FunctionFragment;
    "getMaxSize()": FunctionFragment;
    "getNext(address)": FunctionFragment;
    "getPrev(address)": FunctionFragment;
    "getSize()": FunctionFragment;
    "insert(address,uint256,address,address)": FunctionFragment;
    "isEmpty()": FunctionFragment;
    "isFull()": FunctionFragment;
    "reInsert(address,uint256,address,address)": FunctionFragment;
    "remove(address)": FunctionFragment;
    "setParams(uint256,address,address)": FunctionFragment;
    "validInsertPosition(uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "contains", values: [string]): string;
  encodeFunctionData(
    functionFragment: "findInsertPosition",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getFirst", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNext", values: [string]): string;
  encodeFunctionData(functionFragment: "getPrev", values: [string]): string;
  encodeFunctionData(functionFragment: "getSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isEmpty", values?: undefined): string;
  encodeFunctionData(functionFragment: "isFull", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reInsert",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validInsertPosition",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findInsertPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMaxSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reInsert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validInsertPosition",
    data: BytesLike
  ): Result;

  events: {
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "NodeAdded(address,uint256)": EventFragment;
    "NodeRemoved(address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
}

export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string] & { _borrowerOperationsAddress: string }
>;

export type NodeAddedEvent = TypedEvent<
  [string, BigNumber] & { _id: string; _NICR: BigNumber }
>;

export type NodeRemovedEvent = TypedEvent<[string] & { _id: string }>;

export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string] & { _sortedDoublyLLAddress: string }
>;

export class ISortedTroves extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISortedTrovesInterface;

  functions: {
    contains(_id: string, overrides?: CallOverrides): Promise<[boolean]>;

    findInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getFirst(overrides?: CallOverrides): Promise<[string]>;

    getLast(overrides?: CallOverrides): Promise<[string]>;

    getMaxSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNext(_id: string, overrides?: CallOverrides): Promise<[string]>;

    getPrev(_id: string, overrides?: CallOverrides): Promise<[string]>;

    getSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    insert(
      _id: string,
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEmpty(overrides?: CallOverrides): Promise<[boolean]>;

    isFull(overrides?: CallOverrides): Promise<[boolean]>;

    reInsert(
      _id: string,
      _newICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove(
      _id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _size: BigNumberish,
      _TroveManagerAddress: string,
      _borrowerOperationsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  contains(_id: string, overrides?: CallOverrides): Promise<boolean>;

  findInsertPosition(
    _ICR: BigNumberish,
    _prevId: string,
    _nextId: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getFirst(overrides?: CallOverrides): Promise<string>;

  getLast(overrides?: CallOverrides): Promise<string>;

  getMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

  getNext(_id: string, overrides?: CallOverrides): Promise<string>;

  getPrev(_id: string, overrides?: CallOverrides): Promise<string>;

  getSize(overrides?: CallOverrides): Promise<BigNumber>;

  insert(
    _id: string,
    _ICR: BigNumberish,
    _prevId: string,
    _nextId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEmpty(overrides?: CallOverrides): Promise<boolean>;

  isFull(overrides?: CallOverrides): Promise<boolean>;

  reInsert(
    _id: string,
    _newICR: BigNumberish,
    _prevId: string,
    _nextId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove(
    _id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _size: BigNumberish,
    _TroveManagerAddress: string,
    _borrowerOperationsAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validInsertPosition(
    _ICR: BigNumberish,
    _prevId: string,
    _nextId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    contains(_id: string, overrides?: CallOverrides): Promise<boolean>;

    findInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getFirst(overrides?: CallOverrides): Promise<string>;

    getLast(overrides?: CallOverrides): Promise<string>;

    getMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    getNext(_id: string, overrides?: CallOverrides): Promise<string>;

    getPrev(_id: string, overrides?: CallOverrides): Promise<string>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;

    insert(
      _id: string,
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isEmpty(overrides?: CallOverrides): Promise<boolean>;

    isFull(overrides?: CallOverrides): Promise<boolean>;

    reInsert(
      _id: string,
      _newICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(_id: string, overrides?: CallOverrides): Promise<void>;

    setParams(
      _size: BigNumberish,
      _TroveManagerAddress: string,
      _borrowerOperationsAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BorrowerOperationsAddressChanged(address)"(
      _borrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _borrowerOperationsAddress: string }>;

    BorrowerOperationsAddressChanged(
      _borrowerOperationsAddress?: null
    ): TypedEventFilter<[string], { _borrowerOperationsAddress: string }>;

    "NodeAdded(address,uint256)"(
      _id?: null,
      _NICR?: null
    ): TypedEventFilter<[string, BigNumber], { _id: string; _NICR: BigNumber }>;

    NodeAdded(
      _id?: null,
      _NICR?: null
    ): TypedEventFilter<[string, BigNumber], { _id: string; _NICR: BigNumber }>;

    "NodeRemoved(address)"(
      _id?: null
    ): TypedEventFilter<[string], { _id: string }>;

    NodeRemoved(_id?: null): TypedEventFilter<[string], { _id: string }>;

    "SortedTrovesAddressChanged(address)"(
      _sortedDoublyLLAddress?: null
    ): TypedEventFilter<[string], { _sortedDoublyLLAddress: string }>;

    SortedTrovesAddressChanged(
      _sortedDoublyLLAddress?: null
    ): TypedEventFilter<[string], { _sortedDoublyLLAddress: string }>;
  };

  estimateGas: {
    contains(_id: string, overrides?: CallOverrides): Promise<BigNumber>;

    findInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirst(overrides?: CallOverrides): Promise<BigNumber>;

    getLast(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    getNext(_id: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrev(_id: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;

    insert(
      _id: string,
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEmpty(overrides?: CallOverrides): Promise<BigNumber>;

    isFull(overrides?: CallOverrides): Promise<BigNumber>;

    reInsert(
      _id: string,
      _newICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove(
      _id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParams(
      _size: BigNumberish,
      _TroveManagerAddress: string,
      _borrowerOperationsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contains(
      _id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNext(
      _id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrev(
      _id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insert(
      _id: string,
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEmpty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFull(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reInsert(
      _id: string,
      _newICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      _id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _size: BigNumberish,
      _TroveManagerAddress: string,
      _borrowerOperationsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validInsertPosition(
      _ICR: BigNumberish,
      _prevId: string,
      _nextId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
